Index: SecurePath-main/app/src/main/java/com/example/avance/viewmodel/FormViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.avance.viewmodel\r\n\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.avance.dao.CamarasTrampaDao\r\nimport com.example.avance.dao.FaunaBusquedalibreDao\r\nimport com.example.avance.dao.FaunaConteoDao\r\nimport com.example.avance.dao.FaunaTransectoDao\r\nimport com.example.avance.dao.FormularioBaseDao\r\nimport com.example.avance.dao.ParcelaVegetacionDao\r\nimport com.example.avance.dao.ValidacionCoberturaDao\r\nimport com.example.avance.dao.VariablesClimaticasDao\r\nimport com.example.avance.model.CamarasTrampa\r\nimport com.example.avance.model.FaunaBusquedalibre\r\nimport com.example.avance.model.FaunaConteo\r\nimport com.example.avance.model.FaunaTransecto\r\nimport com.example.avance.model.FormData\r\nimport com.example.avance.model.FormularioBase\r\nimport com.example.avance.model.ParcelaVegetacion\r\nimport com.example.avance.model.ValidacionCobertura\r\nimport com.example.avance.model.VariablesClimaticas\r\nimport kotlinx.coroutines.flow.Flow\r\nimport kotlinx.coroutines.flow.MutableStateFlow\r\nimport kotlinx.coroutines.flow.StateFlow\r\nimport kotlinx.coroutines.launch\r\n\r\n\r\nclass FormularioViewModel(\r\n    private val faunaTransectoDao: FaunaTransectoDao,\r\n    private val faunaConteoDao: FaunaConteoDao,\r\n    private val faunaBusquedalibreDao: FaunaBusquedalibreDao,\r\n    private val parcelaVegetacionDao: ParcelaVegetacionDao,\r\n    private val validacionCoberturaDao: ValidacionCoberturaDao,\r\n    private val camarasTrampaDao: CamarasTrampaDao,\r\n    private val variablesClimaticasDao: VariablesClimaticasDao,\r\n    private val formularioBaseDao: FormularioBaseDao,\r\n    private val dao: FormularioBaseDao\r\n): ViewModel() {\r\n    val formData = mutableStateOf(FormData())\r\n\r\n    // Métodos para actualizar los datos del formulario\r\n    fun updateName(value: String) { formData.value = formData.value.copy(name = value) }\r\n    fun updateDate(value: String) { formData.value = formData.value.copy(date = value) }\r\n    fun updateLocation(value: String) { formData.value = formData.value.copy(location = value) }\r\n    fun updateHora(value: String) { formData.value = formData.value.copy(hora = value) }\r\n    fun updateTransectNumber(value: String) { formData.value = formData.value.copy(transectNumber = value) }\r\n    fun updateRegistro(value: String) { formData.value = formData.value.copy(tipoDeRegistro = value) }\r\n    fun updateSelectedAnimal(animal: String) { formData.value = formData.value.copy(selectedAnimal = animal) }\r\n    fun updateSelectedObservation(observation: String) { formData.value = formData.value.copy(selectedObservation = observation) }\r\n    fun updateCodigof4(codigof4: String) { formData.value = formData.value.copy(codigof4 = codigof4)}\r\n    fun updateCommonName(name: String) { formData.value = formData.value.copy(commonName = name) }\r\n    fun updateScientificName(name: String) { formData.value = formData.value.copy(scientificName = name) }\r\n    fun updateIndividualCount(count: String) { formData.value = formData.value.copy(individualCount = count) }\r\n    fun updateObservationNotes(notes: String) { formData.value = formData.value.copy(observationNotes = notes) }\r\n    fun updateSelectedGrowthHabit(habit: String) { formData.value = formData.value.copy(selectedGrowthHabit = habit) }\r\n    fun updatePlaca(placa: String) { formData.value = formData.value.copy(placa = placa) }\r\n    fun updateCircunference(circumference: String) { formData.value = formData.value.copy(circunference = circumference) }\r\n    fun updateDistance(distance: String) { formData.value = formData.value.copy(distance = distance) }\r\n    fun updateBiomonHeight(height: String) { formData.value = formData.value.copy(biomonHeight = height) }\r\n    fun updateHeight(height: String) { formData.value = formData.value.copy(height = height) }\r\n    fun updateSelectedQuadrant(quadrant: String) { formData.value = formData.value.copy(selectedQuadrant = quadrant) }\r\n    fun updateSelectedSubQuadrant(subQuadrant: String) { formData.value = formData.value.copy(selectedSubQuadrant = subQuadrant) }\r\n    fun updateZone(selectedZone: String) { formData.value = formData.value.copy(selectedZone = selectedZone) }\r\n    fun updateCameraName(name: String) { formData.value = formData.value.copy(cameraName = name) }\r\n    fun updateCameraPlate(plate: String) { formData.value = formData.value.copy(cameraPlate = plate) }\r\n    fun updateGuayaPlate(plate: String) { formData.value = formData.value.copy(guayaPlate = plate) }\r\n    fun updatePathWidth(width: String) { formData.value = formData.value.copy(pathWidth = width) }\r\n    fun updateInstallationDate(date: String) { formData.value = formData.value.copy(installationDate = date) }\r\n    fun updateTargetDistance(distance: String) { formData.value = formData.value.copy(targetDistance = distance) }\r\n    fun updateLensHeight(height: String) { formData.value = formData.value.copy(lensHeight = height) }\r\n    fun updateIsProgrammed(isProgrammed: Boolean) { formData.value = formData.value.copy(isProgrammed = isProgrammed) }\r\n    fun updateHasMemory(hasMemory: Boolean) { formData.value = formData.value.copy(hasMemory = hasMemory) }\r\n    fun updateHasGateTest(hasGateTest: Boolean) { formData.value = formData.value.copy(hasGateTest = hasGateTest) }\r\n    fun updateIsInstalled(isInstalled: Boolean) { formData.value = formData.value.copy(isInstalled = isInstalled) }\r\n    fun updateHasCameraSign(hasSign: Boolean) { formData.value = formData.value.copy(hasCameraSign = hasSign) }\r\n    fun updateIsOn(isOn: Boolean) { formData.value = formData.value.copy(isOn = isOn) }\r\n    fun updateRainfall(rainfall: String) { formData.value = formData.value.copy(pluviosidad = rainfall) }\r\n    fun updateMaxTemperature(maxTemperature: String) { formData.value = formData.value.copy(temperaturaMaxima = maxTemperature) }\r\n    fun updateMinTemperature(minTemperature: String) { formData.value = formData.value.copy(temperaturaMinima = minTemperature) }\r\n    fun updateMaxHumidity(maxHumidity: String) { formData.value = formData.value.copy(humedadMaxima = maxHumidity) }\r\n    fun updateMinHumidity(minHumidity: String) { formData.value = formData.value.copy(humedadMinima = minHumidity) }\r\n    fun updateCreekLevel(creekLevel: String) { formData.value = formData.value.copy(nivelQuebrada = creekLevel) }\r\n    fun updateObservationType(selectedObservationType: String) { formData.value = formData.value.copy(observationType = selectedObservationType) }\r\n    fun updateYesNo1(yesandno1: String) { formData.value = formData.value.copy(yesandno1 = yesandno1) }\r\n    fun updateYesNo2(yesandno2: String) { formData.value = formData.value.copy(yesandno2 = yesandno2) }\r\n    fun updateDisturbance(disturbance: String) { formData.value = formData.value.copy(disturbance = disturbance) }\r\n\r\n    //ViewModel para guardar\r\n    //FaunaTransecto\r\n    fun saveFaunaTransecto() {\r\n        viewModelScope.launch {\r\n            // Crear el objeto `FormularioBase` con los datos generales\r\n            val formularioBase = FormularioBase(\r\n                name = formData.value.name,\r\n                date = formData.value.date,\r\n                location = formData.value.location,\r\n                hora = formData.value.hora,\r\n                tipoDeRegistro = formData.value.tipoDeRegistro\r\n            )\r\n\r\n            // Crear el objeto `FaunaBusquedalibre` con los datos específicos del formulario\r\n            val faunaTransecto = FaunaTransecto(\r\n                formId = 0,  // Este valor se establecerá en el DAO al insertar\r\n                commonName = formData.value.commonName,\r\n                scientificName = formData.value.scientificName,\r\n                individualCount = formData.value.individualCount,\r\n                observationNotes = formData.value.observationNotes,\r\n                selectedAnimal = formData.value.selectedAnimal,\r\n                selectedObservation = formData.value.selectedObservation\r\n            )\r\n\r\n            // Insertar ambos datos en la base de datos mediante una transacción\r\n            faunaTransectoDao.insertFormularioWithTransecto(formularioBase, faunaTransecto)\r\n        }\r\n    }\r\n    //FaunaConteo\r\n    fun saveFaunaConteo() {\r\n        viewModelScope.launch {\r\n            // Crear el objeto `FormularioBase` con los datos generales\r\n            val formularioBase = FormularioBase(\r\n                name = formData.value.name,\r\n                date = formData.value.date,\r\n                location = formData.value.location,\r\n                hora = formData.value.hora,\r\n                tipoDeRegistro = formData.value.tipoDeRegistro\r\n            )\r\n\r\n            // Crear el objeto `FaunaBusquedalibre` con los datos específicos del formulario\r\n            val faunaConteo = FaunaConteo(\r\n                formId = 0,  // Este valor se establecerá en el DAO al insertar\r\n                codigof4 = formData.value.codigof4,\r\n                selectedZone = formData.value.selectedZone,\r\n                commonName = formData.value.commonName,\r\n                scientificName = formData.value.scientificName,\r\n                individualCount = formData.value.individualCount,\r\n                selectedObservation = formData.value.selectedObservation,\r\n                observationNotes = formData.value.observationNotes\r\n\r\n            )\r\n\r\n            // Insertar ambos datos en la base de datos mediante una transacción\r\n            faunaConteoDao.insertFormularioWithConteo(formularioBase, faunaConteo)\r\n        }\r\n    }\r\n    //FaunaBusquedalibre\r\n    fun saveFaunaBusquedalibre() {\r\n        viewModelScope.launch {\r\n            // Crear el objeto `FormularioBase` con los datos generales\r\n            val formularioBase = FormularioBase(\r\n                name = formData.value.name,\r\n                date = formData.value.date,\r\n                location = formData.value.location,\r\n                hora = formData.value.hora,\r\n                tipoDeRegistro = formData.value.tipoDeRegistro\r\n            )\r\n\r\n            // Crear el objeto `FaunaBusquedalibre` con los datos específicos del formulario\r\n            val faunaBusquedalibre = FaunaBusquedalibre(\r\n                formId = 0,  // Este valor se establecerá en el DAO al insertar\r\n                codigof4 = formData.value.codigof4,\r\n                selectedZone = formData.value.selectedZone,\r\n                commonName = formData.value.commonName,\r\n                scientificName = formData.value.scientificName,\r\n                individualCount = formData.value.individualCount,\r\n                selectedObservation = formData.value.selectedObservation,\r\n                observationNotes = formData.value.observationNotes\r\n            )\r\n\r\n            // Insertar ambos datos en la base de datos mediante una transacción\r\n            faunaBusquedalibreDao.insertFormularioWithBusquedalibre(formularioBase, faunaBusquedalibre)\r\n        }\r\n    }\r\n    //Validacion de cobertura\r\n    fun saveValidacionCobertura() {\r\n        viewModelScope.launch {\r\n            // Crear el objeto `FormularioBase` con los datos generales\r\n            val formularioBase = FormularioBase(\r\n                name = formData.value.name,\r\n                date = formData.value.date,\r\n                location = formData.value.location,\r\n                hora = formData.value.hora,\r\n                tipoDeRegistro = formData.value.tipoDeRegistro\r\n            )\r\n\r\n            // Crear el objeto `FaunaBusquedalibre` con los datos específicos del formulario\r\n            val validacionCobertura = ValidacionCobertura(\r\n                formId = 0,  // Este valor se establecerá en el DAO al insertar\r\n                codigof4 = formData.value.codigof4,\r\n                yesandno1 = formData.value.yesandno1,\r\n                yesandno2 = formData.value.yesandno2,\r\n                observationType = formData.value.observationType,\r\n                disturbance = formData.value.disturbance,\r\n                observationNotes = formData.value.observationNotes\r\n            )\r\n\r\n            // Insertar ambos datos en la base de datos mediante una transacción\r\n            validacionCoberturaDao.insertFormularioWithValidacion(formularioBase, validacionCobertura)\r\n        }\r\n    }\r\n    //Parcela de vegetacion\r\n    fun saveParcelaVegetacion() {\r\n        viewModelScope.launch {\r\n            // Crear el objeto `FormularioBase` con los datos generales\r\n            val formularioBase = FormularioBase(\r\n                name = formData.value.name,\r\n                date = formData.value.date,\r\n                location = formData.value.location,\r\n                hora = formData.value.hora,\r\n                tipoDeRegistro = formData.value.tipoDeRegistro\r\n            )\r\n\r\n            // Crear el objeto `FaunaBusquedalibre` con los datos específicos del formulario\r\n            val parcelaVegetacion = ParcelaVegetacion(\r\n                formId = 0,  // Este valor se establecerá en el DAO al insertar\r\n                codigof4 = formData.value.codigof4,\r\n                selectedGrowthHabit = formData.value.selectedGrowthHabit,\r\n                commonName = formData.value.commonName,\r\n                scientificName = formData.value.scientificName,\r\n                placa = formData.value.placa,\r\n                circunference = formData.value.circunference,\r\n                distance = formData.value.distance,\r\n                biomonHeight = formData.value.biomonHeight,\r\n                height = formData.value.height,\r\n                selectedQuadrant = formData.value.selectedQuadrant,\r\n                selectedSubQuadrant = formData.value.selectedSubQuadrant,\r\n                observationNotes = formData.value.observationNotes\r\n            )\r\n\r\n            // Insertar ambos datos en la base de datos mediante una transacción\r\n            parcelaVegetacionDao.insertFormularioWithParcelas(formularioBase, parcelaVegetacion)\r\n        }\r\n    }\r\n    //Camaras Trampa\r\n    fun saveCamarasTrampa() {\r\n        viewModelScope.launch {\r\n            // Crear el objeto `FormularioBase` con los datos generales\r\n            val formularioBase = FormularioBase(\r\n                name = formData.value.name,\r\n                date = formData.value.date,\r\n                location = formData.value.location,\r\n                hora = formData.value.hora,\r\n                tipoDeRegistro = formData.value.tipoDeRegistro\r\n            )\r\n\r\n            // Crear el objeto `FaunaBusquedalibre` con los datos específicos del formulario\r\n            val camarasTrampa = CamarasTrampa(\r\n                formId = 0,  // Este valor se establecerá en el DAO al insertar\r\n                selectedZone = formData.value.selectedZone,\r\n                cameraName = formData.value.cameraName,\r\n                cameraPlate = formData.value.cameraPlate,\r\n                guayaPlate = formData.value.guayaPlate,\r\n                pathWidth = formData.value.pathWidth,\r\n                installationDate = formData.value.installationDate,\r\n                targetDistance = formData.value.targetDistance,\r\n                lensHeight = formData.value.lensHeight,\r\n                isProgrammed = formData.value.isProgrammed,\r\n                hasMemory = formData.value.hasMemory,\r\n                hasGateTest = formData.value.hasGateTest,\r\n                isInstalled = formData.value.isInstalled,\r\n                isOn = formData.value.isOn,\r\n                observationNotes = formData.value.observationNotes\r\n\r\n            )\r\n\r\n            // Insertar ambos datos en la base de datos mediante una transacción\r\n            camarasTrampaDao.insertFormularioWithCamaras(formularioBase, camarasTrampa)\r\n        }\r\n    }\r\n    //Variables Climaticas\r\n    fun saveVariablesClimaticas() {\r\n        viewModelScope.launch {\r\n            // Crear el objeto `FormularioBase` con los datos generales\r\n            val formularioBase = FormularioBase(\r\n                name = formData.value.name,\r\n                date = formData.value.date,\r\n                location = formData.value.location,\r\n                hora = formData.value.hora,\r\n                tipoDeRegistro = formData.value.tipoDeRegistro\r\n            )\r\n\r\n            // Crear el objeto `FaunaBusquedalibre` con los datos específicos del formulario\r\n            val variablesClimaticas = VariablesClimaticas(\r\n                formId = 0,  // Este valor se establecerá en el DAO al insertar\r\n                selectedZone = formData.value.selectedZone,\r\n                pluviosidad = formData.value.pluviosidad,\r\n                temperaturaMaxima = formData.value.temperaturaMaxima,\r\n                humedadMaxima = formData.value.humedadMaxima,\r\n                temperaturaMinima = formData.value.temperaturaMinima,\r\n                humedadMinima = formData.value.humedadMinima,\r\n                nivelQuebrada = formData.value.nivelQuebrada\r\n            )\r\n\r\n            // Insertar ambos datos en la base de datos mediante una transacción\r\n            variablesClimaticasDao.insertFormularioWithVariables(formularioBase, variablesClimaticas)\r\n        }\r\n    }\r\n    private val _formularios = MutableStateFlow<List<FormularioBase>>(emptyList())\r\n    val formularios: StateFlow<List<FormularioBase>> = _formularios\r\n    init {\r\n        fetchFormularios()\r\n    }\r\n    fun fetchFormularios() {\r\n        viewModelScope.launch {\r\n            _formularios.value = formularioBaseDao.getAllFormularios()\r\n        }\r\n    }\r\n\r\n    fun deleteFormulario(formulario: FormularioBase) {\r\n        viewModelScope.launch {\r\n            dao.deleteFormulario(formulario)\r\n            fetchFormularios() // Refrescamos la lista después de eliminar\r\n        }\r\n    }\r\n    fun getFormularioById(formId: Int): Flow<FormularioBase?> {\r\n        return dao.getFormularioById(formId)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SecurePath-main/app/src/main/java/com/example/avance/viewmodel/FormViewModel.kt b/SecurePath-main/app/src/main/java/com/example/avance/viewmodel/FormViewModel.kt
--- a/SecurePath-main/app/src/main/java/com/example/avance/viewmodel/FormViewModel.kt	(revision 076883791146b0fc5ba75690b6e631ab8de2795e)
+++ b/SecurePath-main/app/src/main/java/com/example/avance/viewmodel/FormViewModel.kt	(date 1732046608933)
@@ -7,7 +7,6 @@
 import com.example.avance.dao.FaunaBusquedalibreDao
 import com.example.avance.dao.FaunaConteoDao
 import com.example.avance.dao.FaunaTransectoDao
-import com.example.avance.dao.FormularioBaseDao
 import com.example.avance.dao.ParcelaVegetacionDao
 import com.example.avance.dao.ValidacionCoberturaDao
 import com.example.avance.dao.VariablesClimaticasDao
@@ -20,9 +19,6 @@
 import com.example.avance.model.ParcelaVegetacion
 import com.example.avance.model.ValidacionCobertura
 import com.example.avance.model.VariablesClimaticas
-import kotlinx.coroutines.flow.Flow
-import kotlinx.coroutines.flow.MutableStateFlow
-import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.launch
 
 
@@ -34,8 +30,6 @@
     private val validacionCoberturaDao: ValidacionCoberturaDao,
     private val camarasTrampaDao: CamarasTrampaDao,
     private val variablesClimaticasDao: VariablesClimaticasDao,
-    private val formularioBaseDao: FormularioBaseDao,
-    private val dao: FormularioBaseDao
 ): ViewModel() {
     val formData = mutableStateOf(FormData())
 
@@ -43,7 +37,7 @@
     fun updateName(value: String) { formData.value = formData.value.copy(name = value) }
     fun updateDate(value: String) { formData.value = formData.value.copy(date = value) }
     fun updateLocation(value: String) { formData.value = formData.value.copy(location = value) }
-    fun updateHora(value: String) { formData.value = formData.value.copy(hora = value) }
+    fun updateTime(value: String) { formData.value = formData.value.copy(time = value) }
     fun updateTransectNumber(value: String) { formData.value = formData.value.copy(transectNumber = value) }
     fun updateRegistro(value: String) { formData.value = formData.value.copy(tipoDeRegistro = value) }
     fun updateSelectedAnimal(animal: String) { formData.value = formData.value.copy(selectedAnimal = animal) }
@@ -295,24 +289,4 @@
             variablesClimaticasDao.insertFormularioWithVariables(formularioBase, variablesClimaticas)
         }
     }
-    private val _formularios = MutableStateFlow<List<FormularioBase>>(emptyList())
-    val formularios: StateFlow<List<FormularioBase>> = _formularios
-    init {
-        fetchFormularios()
-    }
-    fun fetchFormularios() {
-        viewModelScope.launch {
-            _formularios.value = formularioBaseDao.getAllFormularios()
-        }
-    }
-
-    fun deleteFormulario(formulario: FormularioBase) {
-        viewModelScope.launch {
-            dao.deleteFormulario(formulario)
-            fetchFormularios() // Refrescamos la lista después de eliminar
-        }
-    }
-    fun getFormularioById(formId: Int): Flow<FormularioBase?> {
-        return dao.getFormularioById(formId)
-    }
 }
\ No newline at end of file
Index: SecurePath-main/app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.kotlin.android)\r\n    alias(libs.plugins.ksp) // esto fue lo que agregue relacionado con el kotlin\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.example.avance\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.example.avance\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        // Configuración de Auth0 en el archivo de manifiesto\r\n        manifestPlaceholders.clear()\r\n        manifestPlaceholders[\"auth0Domain\"] = \"@string/com_auth0_domain\"\r\n        manifestPlaceholders[\"auth0Scheme\"] = \"https\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n        vectorDrawables {\r\n            useSupportLibrary = true\r\n\r\n        }\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_1_8\r\n        targetCompatibility = JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"1.8\"\r\n    }\r\n    buildFeatures {\r\n        compose = true\r\n    }\r\n    composeOptions {\r\n        kotlinCompilerExtensionVersion = \"1.5.1\"\r\n    }\r\n    packaging {\r\n        resources {\r\n            excludes += \"/META-INF/{AL2.0,LGPL2.1}\"\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation(libs.androidx.core.ktx)\r\n    implementation(libs.androidx.lifecycle.runtime.ktx)\r\n    implementation(libs.androidx.activity.compose)\r\n    implementation(platform(libs.androidx.compose.bom))\r\n    implementation(libs.androidx.ui)\r\n    implementation(libs.androidx.ui.graphics)\r\n    implementation(libs.androidx.ui.tooling.preview)\r\n    implementation(libs.androidx.material3)\r\n\r\n    // Agregar dependencias de navegación\r\n    implementation(libs.androidx.navigation.compose) // para Jetpack Compose\r\n    implementation(libs.androidx.navigation.runtime.ktx)\r\n    implementation(libs.androidx.room.common)\r\n    implementation(libs.androidx.room.ktx) // Añadir esta línea\r\n    implementation(libs.androidx.room.runtime) // Usa la última versión disponible\r\n    ksp(libs.androidx.room.compiler)\r\n\r\n    implementation(\"androidx.navigation:navigation-compose:2.4.1\")\r\n    implementation(\"androidx.navigation:navigation-runtime-ktx:2.4.1\")\r\n\r\n    // Dependencia de Auth0\r\n    implementation(\"com.auth0.android:auth0:2.5.0\") // Reemplazo directo si no existe libs.auth0\r\n\r\n\r\n\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.androidx.junit)\r\n    androidTestImplementation(libs.androidx.espresso.core)\r\n    androidTestImplementation(platform(libs.androidx.compose.bom))\r\n    androidTestImplementation(libs.androidx.ui.test.junit4)\r\n    debugImplementation(libs.androidx.ui.tooling)\r\n    debugImplementation(libs.androidx.ui.test.manifest)\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SecurePath-main/app/build.gradle.kts b/SecurePath-main/app/build.gradle.kts
--- a/SecurePath-main/app/build.gradle.kts	(revision 076883791146b0fc5ba75690b6e631ab8de2795e)
+++ b/SecurePath-main/app/build.gradle.kts	(date 1732046442255)
@@ -1,7 +1,10 @@
+import org.gradle.kotlin.dsl.dependencies
+import org.gradle.kotlin.dsl.kotlin
+
 plugins {
-    alias(libs.plugins.android.application)
-    alias(libs.plugins.kotlin.android)
-    alias(libs.plugins.ksp) // esto fue lo que agregue relacionado con el kotlin
+    id("com.android.application")
+    id("org.jetbrains.kotlin.android")
+    id("com.google.devtools.ksp")
 }
 
 android {
@@ -15,15 +18,9 @@
         versionCode = 1
         versionName = "1.0"
 
-        // Configuración de Auth0 en el archivo de manifiesto
-        manifestPlaceholders.clear()
-        manifestPlaceholders["auth0Domain"] = "@string/com_auth0_domain"
-        manifestPlaceholders["auth0Scheme"] = "https"
-
         testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
         vectorDrawables {
             useSupportLibrary = true
-
         }
     }
 
@@ -36,19 +33,24 @@
             )
         }
     }
+
     compileOptions {
         sourceCompatibility = JavaVersion.VERSION_1_8
         targetCompatibility = JavaVersion.VERSION_1_8
     }
+
     kotlinOptions {
         jvmTarget = "1.8"
     }
+
     buildFeatures {
         compose = true
     }
+
     composeOptions {
         kotlinCompilerExtensionVersion = "1.5.1"
     }
+
     packaging {
         resources {
             excludes += "/META-INF/{AL2.0,LGPL2.1}"
@@ -57,6 +59,7 @@
 }
 
 dependencies {
+    // Dependencias principales
     implementation(libs.androidx.core.ktx)
     implementation(libs.androidx.lifecycle.runtime.ktx)
     implementation(libs.androidx.activity.compose)
@@ -66,28 +69,47 @@
     implementation(libs.androidx.ui.tooling.preview)
     implementation(libs.androidx.material3)
 
-    // Agregar dependencias de navegación
-    implementation(libs.androidx.navigation.compose) // para Jetpack Compose
+    // Dependencias de navegación
+    implementation(libs.androidx.navigation.compose)
     implementation(libs.androidx.navigation.runtime.ktx)
+
+    // Dependencias de Room
     implementation(libs.androidx.room.common)
-    implementation(libs.androidx.room.ktx) // Añadir esta línea
-    implementation(libs.androidx.room.runtime) // Usa la última versión disponible
+    implementation(libs.androidx.room.ktx)
+    implementation(libs.androidx.room.runtime)
     ksp(libs.androidx.room.compiler)
 
-    implementation("androidx.navigation:navigation-compose:2.4.1")
-    implementation("androidx.navigation:navigation-runtime-ktx:2.4.1")
-
     // Dependencia de Auth0
-    implementation("com.auth0.android:auth0:2.5.0") // Reemplazo directo si no existe libs.auth0
+    implementation("com.auth0.android:auth0:2.5.0")
 
+    // Dependencias para pruebas unitarias
+    testImplementation("junit:junit:4.13.2")
+    testImplementation("io.mockk:mockk:1.13.5")
+    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4")
 
-
-    testImplementation(libs.junit)
+    // Dependencias para pruebas instrumentadas (Android)
     androidTestImplementation(libs.androidx.junit)
     androidTestImplementation(libs.androidx.espresso.core)
     androidTestImplementation(platform(libs.androidx.compose.bom))
     androidTestImplementation(libs.androidx.ui.test.junit4)
+
+    // Dependencias para depuración
     debugImplementation(libs.androidx.ui.tooling)
     debugImplementation(libs.androidx.ui.test.manifest)
 }
+android {
+    defaultConfig {
+        applicationId = "com.example.avance"
+        minSdk = 24
+        targetSdk = 34
+        versionCode = 1
+        versionName = "1.0"
 
+        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
+        vectorDrawables.useSupportLibrary = true
+
+        // Agregar placeholders para pruebas unitarias
+        manifestPlaceholders["auth0Domain"] = "example.auth0.com"
+        manifestPlaceholders["auth0Scheme"] = "https"
+    }
+}
Index: .idea/runConfigurations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/runConfigurations.xml b/.idea/runConfigurations.xml
new file mode 100644
--- /dev/null	(date 1732046442255)
+++ b/.idea/runConfigurations.xml	(date 1732046442255)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RunConfigurationProducerService">
+    <option name="ignoredProducers">
+      <set>
+        <option value="com.intellij.execution.junit.AbstractAllInDirectoryConfigurationProducer" />
+        <option value="com.intellij.execution.junit.AllInPackageConfigurationProducer" />
+        <option value="com.intellij.execution.junit.PatternConfigurationProducer" />
+        <option value="com.intellij.execution.junit.TestInClassConfigurationProducer" />
+        <option value="com.intellij.execution.junit.UniqueIdConfigurationProducer" />
+        <option value="com.intellij.execution.junit.testDiscovery.JUnitTestDiscoveryConfigurationProducer" />
+        <option value="org.jetbrains.kotlin.idea.junit.KotlinJUnitRunConfigurationProducer" />
+        <option value="org.jetbrains.kotlin.idea.junit.KotlinPatternConfigurationProducer" />
+      </set>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: SecurePath-main/avance/gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[versions]\r\nagp = \"8.6.0\"\r\nkotlin = \"1.9.0\"\r\ncoreKtx = \"1.13.1\"\r\njunit = \"4.13.2\"\r\njunitVersion = \"1.2.1\"\r\nespressoCore = \"3.6.1\"\r\nlifecycleRuntimeKtx = \"2.8.6\"\r\nactivityCompose = \"1.9.3\"\r\ncomposeBom = \"2024.04.01\"\r\n\r\n[libraries]\r\nandroidx-core-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"coreKtx\" }\r\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\r\nandroidx-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\r\nandroidx-espresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\r\nandroidx-lifecycle-runtime-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-runtime-ktx\", version.ref = \"lifecycleRuntimeKtx\" }\r\nandroidx-activity-compose = { group = \"androidx.activity\", name = \"activity-compose\", version.ref = \"activityCompose\" }\r\nandroidx-compose-bom = { group = \"androidx.compose\", name = \"compose-bom\", version.ref = \"composeBom\" }\r\nandroidx-ui = { group = \"androidx.compose.ui\", name = \"ui\" }\r\nandroidx-ui-graphics = { group = \"androidx.compose.ui\", name = \"ui-graphics\" }\r\nandroidx-ui-tooling = { group = \"androidx.compose.ui\", name = \"ui-tooling\" }\r\nandroidx-ui-tooling-preview = { group = \"androidx.compose.ui\", name = \"ui-tooling-preview\" }\r\nandroidx-ui-test-manifest = { group = \"androidx.compose.ui\", name = \"ui-test-manifest\" }\r\nandroidx-ui-test-junit4 = { group = \"androidx.compose.ui\", name = \"ui-test-junit4\" }\r\nandroidx-material3 = { group = \"androidx.compose.material3\", name = \"material3\" }\r\n\r\n[plugins]\r\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\r\nkotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SecurePath-main/avance/gradle/libs.versions.toml b/SecurePath-main/avance/gradle/libs.versions.toml
--- a/SecurePath-main/avance/gradle/libs.versions.toml	(revision 076883791146b0fc5ba75690b6e631ab8de2795e)
+++ b/SecurePath-main/avance/gradle/libs.versions.toml	(date 1732046442271)
@@ -29,3 +29,4 @@
 android-application = { id = "com.android.application", version.ref = "agp" }
 kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
 
+ksp = { id = "com.google.devtools.ksp", version = "1.9.0-1.0.13" }
\ No newline at end of file
Index: SecurePath-main/app/src/main/java/com/example/avance/view/formulario_activity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.avance.view\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport com.example.avance.R\r\nimport com.example.avance.viewmodel.FontSizeViewModel\r\nimport com.example.avance.viewmodel.FormularioViewModel\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun FormularioScreen(\r\n    navController: NavController,\r\n    viewModel: FormularioViewModel,\r\n    fontSizeViewModel: FontSizeViewModel\r\n) {\r\n    val formData = viewModel.formData.value\r\n    val fontSize by fontSizeViewModel.fontSize.collectAsState()\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            TopAppBar(\r\n                title = { Text(\"Formulario\", color = Color.White, fontSize = fontSize.sp) },\r\n                navigationIcon = {\r\n                    Text(\r\n                        text = \"<\",\r\n                        color = Color.White,\r\n                        fontSize = 24.sp,\r\n                        modifier = Modifier\r\n                            .padding(horizontal = 16.dp)\r\n                            .clickable { navController.popBackStack() }\r\n                    )\r\n                },\r\n                colors = TopAppBarDefaults.topAppBarColors(\r\n                    containerColor = Color(0xFFA4C639)\r\n                )\r\n            )\r\n        }\r\n    ) { padding ->\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(padding)\r\n                .verticalScroll(rememberScrollState())\r\n                .padding(16.dp)\r\n        ) {\r\n            FormTextField(\"Nombre\", formData.name, fontSize = fontSize, onValueChange = viewModel::updateName)\r\n            FormTextField(\"Fecha\", formData.date, fontSize = fontSize, onValueChange = viewModel::updateDate)\r\n\r\n            Row(\r\n                verticalAlignment = Alignment.CenterVertically,\r\n                modifier = Modifier.fillMaxWidth()\r\n            ) {\r\n                FormTextField(\r\n                    \"Localidad\",\r\n                    formData.location,\r\n                    fontSize = fontSize,\r\n                    onValueChange = viewModel::updateLocation,\r\n                    modifier = Modifier.weight(1f)\r\n                )\r\n                IconButton(\r\n                    onClick = { /* Acción para abrir el mapa o buscar localización */ },\r\n                    modifier = Modifier.size(48.dp)\r\n                ) {\r\n                    Image(\r\n                        painter = painterResource(id = R.drawable.ic_map),\r\n                        contentDescription = \"Buscar ubicación\"\r\n                    )\r\n                }\r\n            }\r\n\r\n            FormTextField(\"Hora\", formData.hora, fontSize = fontSize, onValueChange = viewModel::updateHora)\r\n            FormTextField(\"Número de Transecto\", formData.transectNumber, fontSize = fontSize, onValueChange = viewModel::updateTransectNumber)\r\n\r\n            Spacer(modifier = Modifier.height(16.dp))\r\n\r\n            Text(\"Estado del Tiempo\", fontWeight = FontWeight.Bold, fontSize = fontSize.sp)\r\n            Spacer(modifier = Modifier.height(8.dp))\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceEvenly\r\n            ) {\r\n                WeatherIcon(iconId = R.drawable.ic_soleado, description = \"Soleado\")\r\n                WeatherIcon(iconId = R.drawable.ic_nublado, description = \"Nublado\")\r\n                WeatherIcon(iconId = R.drawable.ic_lluvioso, description = \"Lluvioso\")\r\n            }\r\n\r\n            Spacer(modifier = Modifier.height(16.dp))\r\n\r\n            Text(\"Tipo de Registro\", fontWeight = FontWeight.Bold, fontSize = fontSize.sp)\r\n            Spacer(modifier = Modifier.height(8.dp))\r\n            Column {\r\n                SelectableOption(\"Fauna en Transectos\", formData.tipoDeRegistro, fontSize) { viewModel.updateRegistro(\"Fauna en Transectos\") }\r\n                SelectableOption(\"Fauna en Punto de Conteo\", formData.tipoDeRegistro, fontSize) { viewModel.updateRegistro(\"Fauna en Punto de Conteo\") }\r\n                SelectableOption(\"Fauna Búsqueda Libre\", formData.tipoDeRegistro, fontSize) { viewModel.updateRegistro(\"Fauna Búsqueda Libre\") }\r\n                SelectableOption(\"Validación de Cobertura\", formData.tipoDeRegistro, fontSize) { viewModel.updateRegistro(\"Validación de Cobertura\") }\r\n                SelectableOption(\"Parcela de Vegetación\", formData.tipoDeRegistro, fontSize) { viewModel.updateRegistro(\"Parcela de Vegetación\") }\r\n                SelectableOption(\"Cámaras Trampa\", formData.tipoDeRegistro, fontSize) { viewModel.updateRegistro(\"Cámaras Trampa\") }\r\n                SelectableOption(\"Variables Climáticas\", formData.tipoDeRegistro, fontSize) { viewModel.updateRegistro(\"Variables Climáticas\") }\r\n            }\r\n\r\n            Spacer(modifier = Modifier.height(16.dp))\r\n\r\n            Button(\r\n                onClick = {\r\n                    when (formData.tipoDeRegistro) {\r\n                        \"Fauna en Transectos\" -> navController.navigate(\"form_1\")\r\n                        \"Fauna en Punto de Conteo\" -> navController.navigate(\"form_2\")\r\n                        \"Fauna Búsqueda Libre\" -> navController.navigate(\"form_3\")\r\n                        \"Validación de Cobertura\" -> navController.navigate(\"form_4\")\r\n                        \"Parcela de Vegetación\" -> navController.navigate(\"form_5\")\r\n                        \"Cámaras Trampa\" -> navController.navigate(\"form_6\")\r\n                        \"Variables Climáticas\" -> navController.navigate(\"form_7\")\r\n                    }\r\n                },\r\n                modifier = Modifier.fillMaxWidth(),\r\n                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4CAF50))\r\n            ) {\r\n                Text(\"SIGUIENTE\", color = Color.White, fontSize = fontSize.sp)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun FormTextField(label: String, value: String, fontSize: Float, modifier: Modifier = Modifier, onValueChange: (String) -> Unit) {\r\n    TextField(\r\n        value = value,\r\n        onValueChange = onValueChange,\r\n        label = { Text(label, fontSize = fontSize.sp) },\r\n        modifier = modifier.fillMaxWidth().padding(4.dp),\r\n        singleLine = true,\r\n        textStyle = LocalTextStyle.current.copy(fontSize = fontSize.sp)\r\n    )\r\n}\r\n\r\n@Composable\r\nfun WeatherIcon(iconId: Int, description: String, onClick: () -> Unit = {}) {\r\n    IconButton(onClick = onClick) {\r\n        Image(\r\n            painter = painterResource(id = iconId),\r\n            contentDescription = description,\r\n            modifier = Modifier.size(48.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nfun SelectableOption(label: String, selectedOption: String?, fontSize: Float, onSelected: (String) -> Unit) {\r\n    Row(\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable { onSelected(label) }\r\n            .padding(vertical = 4.dp)\r\n    ) {\r\n        RadioButton(\r\n            selected = (label == selectedOption),\r\n            onClick = { onSelected(label) }\r\n        )\r\n        Text(label, fontSize = fontSize.sp)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SecurePath-main/app/src/main/java/com/example/avance/view/formulario_activity.kt b/SecurePath-main/app/src/main/java/com/example/avance/view/formulario_activity.kt
--- a/SecurePath-main/app/src/main/java/com/example/avance/view/formulario_activity.kt	(revision 076883791146b0fc5ba75690b6e631ab8de2795e)
+++ b/SecurePath-main/app/src/main/java/com/example/avance/view/formulario_activity.kt	(date 1732046442268)
@@ -12,12 +12,16 @@
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import androidx.navigation.NavController
 import com.example.avance.R
 import com.example.avance.viewmodel.FontSizeViewModel
 import com.example.avance.viewmodel.FormularioViewModel
+import androidx.navigation.compose.rememberNavController
+
+
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
@@ -171,5 +175,6 @@
             onClick = { onSelected(label) }
         )
         Text(label, fontSize = fontSize.sp)
-    }
-}
+    }}
+
+
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"jbr-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 076883791146b0fc5ba75690b6e631ab8de2795e)
+++ b/.idea/misc.xml	(date 1732046442255)
@@ -1,6 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <bytecodeTargetLevel target=\"17\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision 076883791146b0fc5ba75690b6e631ab8de2795e)
+++ b/.idea/compiler.xml	(date 1732046442255)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="17" />
+    <bytecodeTargetLevel target="21" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$/SecurePath-main\" />\r\n        <option name=\"gradleJvm\" value=\"#GRADLE_LOCAL_JAVA_HOME\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$/SecurePath-main\" />\r\n            <option value=\"$PROJECT_DIR$/SecurePath-main/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveExternalAnnotations\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 076883791146b0fc5ba75690b6e631ab8de2795e)
+++ b/.idea/gradle.xml	(date 1732046442255)
@@ -4,6 +4,7 @@
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
+        <option name="testRunner" value="CHOOSE_PER_TEST" />
         <option name="externalProjectPath" value="$PROJECT_DIR$/SecurePath-main" />
         <option name="gradleJvm" value="#GRADLE_LOCAL_JAVA_HOME" />
         <option name="modules">
Index: SecurePath-main/settings.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>pluginManagement {\r\n    repositories {\r\n        google {\r\n            content {\r\n                includeGroupByRegex(\"com\\\\.android.*\")\r\n                includeGroupByRegex(\"com\\\\.google.*\")\r\n                includeGroupByRegex(\"androidx.*\")\r\n            }\r\n        }\r\n        mavenCentral()\r\n        gradlePluginPortal()\r\n    }\r\n}\r\ndependencyResolutionManagement {\r\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n}\r\n\r\nrootProject.name = \"avance\"\r\ninclude(\":app\")\r\n 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SecurePath-main/settings.gradle.kts b/SecurePath-main/settings.gradle.kts
--- a/SecurePath-main/settings.gradle.kts	(revision 076883791146b0fc5ba75690b6e631ab8de2795e)
+++ b/SecurePath-main/settings.gradle.kts	(date 1732046442271)
@@ -8,6 +8,7 @@
             }
         }
         mavenCentral()
+        jcenter() // Agrega esta línea
         gradlePluginPortal()
     }
 }
@@ -16,9 +17,9 @@
     repositories {
         google()
         mavenCentral()
+        jcenter() // Agrega esta línea también aquí
     }
 }
 
 rootProject.name = "avance"
 include(":app")
- 
\ No newline at end of file
diff --git a/SecurePath-main/app/libs.versions.toml b/SecurePath-main/app/libs.versions.toml
deleted file mode 100644
